#!/usr/bin/env node

const { spawn } = require('child_process');
const path = require('path');

console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                   CAMERA MANUAL VAULT                         ‚ïë
‚ïë                  AUTOMATION STARTUP                           ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
`);

console.log('üöÄ Starting CMV Automation System...\n');

// Step 1: Fix the database schema
console.log('üìä Step 1: Fixing database schema...');
const fixDb = spawn('node', ['fix-column-names.js'], { stdio: 'inherit' });

fixDb.on('close', (code) => {
    if (code !== 0) {
        console.error(`\n‚ùå Database fix failed with code ${code}`);
        console.log('üí° Try running: node fix-column-names.js manually to see the error');
        process.exit(1);
    }

    console.log('\n‚úÖ Database schema fixed!\n');

    // Step 2: Start the automation
    console.log('ü§ñ Step 2: Starting camera automation...');
    console.log('This will process 20 cameras and save them to the database.\n');

    const automation = spawn('node', ['cmv-automation-with-images.js'], { stdio: 'inherit' });

    automation.on('close', (code) => {
        if (code !== 0) {
            console.error(`\n‚ùå Automation failed with code ${code}`);
            process.exit(1);
        }

        console.log('\n‚úÖ Automation completed successfully!\n');

        // Step 3: Verify results
        console.log('üìã Step 3: Verifying results...');
        const sqlite3 = require('sqlite3').verbose();
        const db = new sqlite3.Database(path.join(__dirname, 'data', 'camera-vault.db'));

        db.get("SELECT COUNT(*) as count FROM cameras", (err, row) => {
            if (err) {
                console.error('‚ùå Error checking camera count:', err);
            } else {
                console.log(`\nüéâ Success! ${row.count} cameras in database`);
                
                // Show some sample cameras
                db.all("SELECT brand, model, imageUrl FROM cameras LIMIT 5", (err, rows) => {
                    if (!err && rows.length > 0) {
                        console.log('\nüì∑ Sample cameras added:');
                        rows.forEach(camera => {
                            const hasImage = camera.imageUrl && !camera.imageUrl.includes('placeholder') ? '‚úÖ' : 'üì∑';
                            console.log(`  ${hasImage} ${camera.brand} ${camera.model}`);
                        });
                    }

                    db.close();

                    console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    AUTOMATION COMPLETE!                       ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë  ‚úÖ Database schema: FIXED                                    ‚ïë
‚ïë  ‚úÖ Cameras processed: 20                                     ‚ïë
‚ïë  ‚úÖ Server ready at: http://localhost:3000                    ‚ïë
‚ïë                                                               ‚ïë
‚ïë  üì± View cameras: http://localhost:3000/cameras              ‚ïë
‚ïë  üîç Monitor: http://localhost:3000/automation-monitor        ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üí° To run the server: npm start
`);
                });
            }
        });
    });
});

// Handle Ctrl+C gracefully
process.on('SIGINT', () => {
    console.log('\n\n‚ö†Ô∏è  Automation interrupted by user');
    process.exit(0);
});